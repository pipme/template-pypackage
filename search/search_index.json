{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#a-simple-template-for-python-packages","title":"A simple template for python packages.","text":"<p>The primary aim of this template is for prototyping python projects (usually machine learning related) that adhere to good conventions. Conda environment is supported for development via <code>environment.yml</code>.</p> <p>To create a new python project using this template, run:</p> <pre><code>pip install cookiecutter  # Install cookiecutter first, there are other ways, e.g. brew install\ncookiecutter https://github.com/pipme/template-pypackage.git  # ~10s for setup\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>This repo takes inspirits and reuses some code snippets from:</p> <ul> <li>https://github.com/waynerv/cookiecutter-pypackage</li> <li>https://github.com/ionelmc/cookiecutter-pylibrary</li> </ul>"},{"location":"console_script_setup/","title":"Console script","text":""},{"location":"console_script_setup/#console-script-setup","title":"Console Script Setup","text":"<p>Optionally, your package can include a console script using Click.</p>"},{"location":"console_script_setup/#how-it-works","title":"How It Works","text":"<p>If the <code>command_line_interface</code> option is set to <code>click</code> during setup, cookiecutter will add a file <code>cli.py</code> in the <code>pkg_name</code> subdirectory. An entry point is added to <code>pyproject.toml</code> that points to the main function in cli.py.</p>"},{"location":"console_script_setup/#usage","title":"Usage","text":"<p>To use the console script in development:</p> <pre><code>conda env create -f environment.yml\n</code></pre> <p>Then execute:</p> <pre><code>$project_name_slug --help\n</code></pre> <p>it will show your package name, project short description and exit.</p>"},{"location":"console_script_setup/#more-details","title":"More Details","text":"<p>You can read more about Python Click at Click.</p>"},{"location":"faq/","title":"FAQ","text":"<p>???+ Explain these GitHub workflows yaml files?</p> <pre><code>- `dev.yml`: define dev workflow, run on every push and pull requests to master, basically run all the tests against multiple versions and platforms.\n- `preview.yml`: define stage &amp; preview workflow, run on every push to master, publish dev build to TestPyPI.\n- `release.yml`: define release &amp; publish workflow, run on every tag push, create GitHub release, publish docs to GitHub Pages and built package to PyPI.\n</code></pre> <p>???+ Why not travis CI?</p> <p>Travis CI is a great service, however, github actions is super convenient, less configuration, better integration. Less configuration, less error prone. Private repository is supported by github actions.</p> <p>???+ Why not read the docs?</p> <p>Same reason as above. GitHub Pages is convenient than read the docs, it requires no further configuration, except access token. As to read the docs, you need to write v2 config file, plus several settings on web pages.</p> <p>???+ Why mkdocs over sphinx?</p> <p>reStructured Text and Sphinx is way to tedious, though powerful. With extension, you'll find almost all features are available in mkdocs, in a neat and productive way.</p> <p>???+ What are the configuration items?</p> <p>Here is a list:</p> <pre><code>```\n## Templated Values\n\nThe following appear in various parts of your generated project.\n\nproject_name\nThe name of your new Python package project. This is used in\ndocumentation, so spaces and any characters are fine here.\n\nproject_name_slug\nThe name of your Python package for PyPI, also as the repository name of GitHub.\nTypically, it is the slugified version of project_name.\n\npackage_name\nThe namespace of your Python package. This should be Python import-friendly.\n\nproject_short_description\nA 1-sentence description of what your Python package does.\n\nfull_name\nYour full name.\n\nemail\nYour email address.\n\ngithub_username\nYour GitHub username.\n\nversion\nThe starting version number of the package.\n\ndocstrings_style\none of `numpy, google`. It's required by flake8-docstrings.\n\n## Options\n\nThe following package configuration options set up different features\nfor your project.\n\ncommand_line_interface\nWhether to create a console script using Python Click. Console script\nentry point will match the project_name_slug. Options: \\['click', \"No\ncommand-line interface\"\\]\n```\n</code></pre> <p>except above settings, for CI/CD, you'll also need configure gitub repsitory secrets at page repo &gt; settings &gt; secrtes, and add the following secrets:</p> <pre><code>- PERSONAL_TOKEN (required for publishing document to git pages)\n- TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi)\n- PYPI_API_TOKEN (required for publish )\n</code></pre>"},{"location":"history/","title":"History","text":""},{"location":"history/#history","title":"History","text":""},{"location":"history/#v10","title":"v1.0","text":"<p>first release with the following features:</p> <ul> <li>Conda: Manage python environment for development.</li> <li>Mkdocs: Writing your docs in markdown style</li> <li>Testing with Pytest (unittest is still supported out of the box)</li> <li>Code coverage report and endorsed by Codecov</li> <li>Tox: Test your code against environment matrix, lint and artifact check</li> <li>Format with Black and Isort</li> <li>Lint code with Flake8 and Flake8-docstrings</li> <li>Check static type with Mypy (optional)</li> <li>Pre-commit hooks: Formatting/linting anytime when commit your code</li> <li>Mkdocstrings: Auto API doc generation</li> <li>Command line interface using Click (optional)</li> <li>bump2version: Pre-configured version bumping with a single command</li> <li>Continuous Integration/Deployment by GitHub actions, includes:<ul> <li>publish dev build/official release to TestPyPI/PyPI automatically when CI success</li> <li>publish documents automatically when CI success</li> <li>extract changelog from CHANGELOG and integrate with release notes automatically</li> </ul> </li> <li>Host your documentation from GitHub Pages with zero-config</li> </ul>"},{"location":"pypi_release_checklist/","title":"Release checklist","text":""},{"location":"pypi_release_checklist/#pypi-release-checklist","title":"PyPI Release Checklist","text":""},{"location":"pypi_release_checklist/#before-your-first-release","title":"Before Your First Release","text":"<p>You better visit PyPI to make sure your package name is unused.</p>"},{"location":"pypi_release_checklist/#for-every-release","title":"For Every Release","text":"<ol> <li> <p>Make some pull requests, merge all changes from feature branch to master/main.</p> </li> <li> <p>Update CHANGELOG.md manually. Make sure it follows the Keep a Changelog standard.     Be noticed that GitHub workflow will read changelog and extract release notes automatically.</p> </li> <li> <p>Commit the changelog changes:</p> <pre><code>git add CHANGELOG.md\ngit commit -m \"Changelog for upcoming release 0.1.1.\"\n</code></pre> </li> <li> <p>Update version number and automatically create a commit, tag(can also be patch or major).</p> <pre><code>bump2version minor\n</code></pre> </li> <li> <p>Run the tests locally for insurance:</p> <pre><code>tox\n</code></pre> </li> <li> <p>Push these commits to master/main:</p> <pre><code>git push\n</code></pre> <p>Before proceeding to the next step, please check workflows triggered by this push have passed.</p> </li> <li> <p>Push the tags(created by bump2version) to master/main, creating the new release on both GitHub and PyPI:</p> <pre><code>git push --tags\n</code></pre> <p>Only tag name started with 'v'(lower case) will leverage GitHub release workflow.</p> </li> <li> <p>Check the PyPI listing page to make sure that the README, release     notes, and roadmap display properly. If tox test passed, this should be ok, since     we have already run twine check during tox test.</p> </li> </ol>"},{"location":"pypi_release_checklist/#about-this-checklist","title":"About This Checklist","text":"<p>This checklist is adapted from https://cookiecutter-pypackage.readthedocs.io/en/latest/pypi_release_checklist.html.</p> <p>It assumes that you are using all features of Cookiecutter PyPackage.</p>"},{"location":"tutorial/","title":"Tutorial","text":""},{"location":"tutorial/#tutorial","title":"Tutorial","text":"Note <p>Did you find this article confusing? Edit this file and pull a request!</p> <p>To start with, you will need GitHub, PyPI, TestPyPI and Codecov account. If you don't have one, please follow the links to apply one before you get started on this tutorial.</p> <p>If you are new to Git and GitHub, you should probably spend a few minutes on some tutorials at the top of the page at GitHub Help.</p>"},{"location":"tutorial/#step-1-install-cookiecutter","title":"Step 1: Install Cookiecutter","text":"<p>Install cookiecutter:</p> <pre><code>pip install cookiecutter\n</code></pre>"},{"location":"tutorial/#step-2-generate-your-package","title":"Step 2: Generate Your Package","text":"<p>Now it's time to generate your Python package.</p> <p>Run the following command and feed with answers, If you don\u2019t know what to enter, stick with the defaults:</p> <pre><code>cookiecutter https://github.com/waynerv/cookiecutter-pypackage.git\n</code></pre> <p>Finally, a new folder will be created under current folder, the name is the answer you provided to <code>project_name_slug</code>.</p> <p>Go to this generated folder, the project layout should look like:</p> <pre><code>python_project\n\u251c\u2500\u2500 CHANGELOG.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 api.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 changelog.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 installation.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 usage.md\n\u251c\u2500\u2500 environment.yml\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 mypy.ini\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 pytest.ini\n\u251c\u2500\u2500 python_project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __main__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 cli.py\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 tests\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.cpython-39.pyc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 test_python_project.py\n\u2514\u2500\u2500 tox.ini\n</code></pre> <p>Here the <code>project_name_slug</code> is <code>python_project</code>, when you generate yours, it could be other name.</p> <p>Also be noticed that there's <code>pyproject.toml</code> in this folder. This is the main configuration file of our project.</p>"},{"location":"tutorial/#step-3-install-dev-requirements","title":"Step 3: Install Dev Requirements","text":"<p>You should still be in the folder named as <code>project_name_slug</code>, which containing the <code>pyproject.toml</code> file.</p> <p>Install the new project's local development requirements:</p> <pre><code>conda env create -f environment.yml\n</code></pre> Tips <p>Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test might not be shipped.</p> <p>As the developer, you will need install all the dependencies.</p> Tips <p>if you found erros like the following during tox run: <pre><code>ERROR: InterpreterNotFound: python3.9\n</code></pre> don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it).</p>"},{"location":"tutorial/#step-4-create-a-github-repo","title":"Step 4: Create a GitHub Repo","text":"<p>Go to your GitHub account and create a new repo named <code>my-package</code>, where <code>my-package</code> matches the <code>project_name_slug</code> from your answers to running cookiecutter.</p> <p>Then go to repo &gt; settings &gt; secrets, click on 'New repository secret', add the following secrets:</p> <ul> <li>TEST_PYPI_API_TOKEN, see How to apply TestPyPI token</li> <li>PYPI_API_TOKEN, see How to apply pypi token</li> <li>PERSONAL_TOKEN, see How to apply personal token</li> </ul>"},{"location":"tutorial/#step-5-set-up-codecov-integration","title":"Step 5: Set Up codecov integration","text":"Tips <p>If you have already setup codecov integration and configured access for all your repositories, you can skip this step.</p> <p>In your browser, visit install codecov app, you'll be landed at this page:</p> <p></p> <p>Click on the green <code>install</code> button at top right, choose <code>all repositories</code> then click on <code>install</code> button, following directions until all set.</p> <p>If the repo you created is a private repo, you need to set the following additional secrets, which is not required for public repos:</p> <ul> <li>CODECOV_TOKEN, see Codecov GitHub Action - Usage</li> </ul>"},{"location":"tutorial/#step-6-upload-code-to-github","title":"Step 6: Upload code to GitHub","text":"<p>Back to your develop environment, find the folder named after the <code>project_name_slug</code>. Move into this folder, and then setup git to use your GitHub repo and upload the code:</p> <pre><code>cd my-package\n\ngit add .\ngit commit -m \"Initial commit.\"\ngit branch -M main\ngit remote add origin git@github.com:myusername/my-package.git\ngit push -u origin main\n</code></pre> <p>Where <code>myusername</code> and <code>my-package</code> are adjusted for your username and repo name.</p> <p>You'll need a ssh key to push the repo. You can Generate a key or Add an existing one.</p> Warning <p>if you answered 'yes' to the question if install pre-commit hooks at last step, then you should find pre-commit be invoked when you run <code>git commit</code>, and some files  may be modified by hooks. If so, please add these files and commit again.</p>"},{"location":"tutorial/#check-result","title":"Check result","text":"<p>After pushing your code to GitHub, goto GitHub web page, navigate to your repo, then click on actions link, you should find screen like this:</p> <p></p> <p>There should be some workflows running. After they finished, go to TestPyPI, check if a new artifact is published under the name <code>project_name_slug</code>.</p>"},{"location":"tutorial/#step-7-check-documentation","title":"Step 7. Check documentation","text":"<p>Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once:</p> <ol> <li>the commit is tagged, and the tag name is started with 'v' (lower case)</li> <li>build/testing executed by GitHub CI passed</li> </ol> <p>If you'd like to see what it's look like now, you could run the following command:</p> <pre><code>mkdocs serve\n</code></pre> <p>This will run the builtin development server for you to preview.</p>"},{"location":"tutorial/#step-8-make-official-release","title":"Step 8. Make official release","text":"<p>After done with your phased development in a feature branch, make a pull request, following instructions at release checklist, trigger first official release and check result at PyPI.</p>"}]}